import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.List;

import com.taxhouse.model.*;
import com.taxhouse.db.*;
import com.taxhouse.app.*;
import com.taxhouse.model.TaxRecord.Entry;
import com.taxhouse.servlet.TaxCalculator;


//tested
rule "Base Federal rule for Non Profit private/public Employees"
salience 20
    when
        item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC))
    then
        double salary = item.getIncome();
        double taxCal = 0;
        double taxPer = 0;
        int slab= DBHandler.getInstance().getSlabId(item.getIncome());
        if(slab==1)
        {
        	taxPer = 13;
         taxCal = Utils.calculateTax(salary,taxPer);
        }
        else if(slab == 2)
        {
	         taxPer=15;
	         taxCal = Utils.calculateTax(salary, taxPer);
        }
        else if(slab ==3)
        {
	         taxPer=17;
	         taxCal = Utils.calculateTax(salary,taxPer);
        }
        else{
        	taxPer =18;
            taxCal = Utils.calculateTax(salary,taxPer);
	
            }
	  System.out.println("Base Federal Tax for Non profit organization employees @ " + taxPer + "% : " +taxCal);        
      item.setTax(taxCal);
end
//tested
rule "State tax for Profit private/public Employees"
salience 19
when
item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC))
then
double salary = item.getIncome();
double taxCal = 0;
double taxPer = 0;
int slab= DBHandler.getInstance().getSlabId(item.getIncome());

 if(item.getState().substring(0,1) == "A" || item.getState().substring(0,1) == "B"){
        if(slab==1){
         taxPer = 8.9;
         }
         else{
         taxPer=9.9;
         }
    }
   	else if(item.getState().substring(0,1) == "C" || item.getState().substring(0,1) == "D") {
         if(slab==1){
         taxPer = 15.5;
    	}
    	else{
    	taxPer=16.5;
    	}
     }
    
    else{
        if(slab==1){
         taxPer=17.0;
         }
         else{
         taxPer=18;
         	}
        }
      double taxcal = Utils.calculateTax(salary,taxPer);
      System.out.println("Base State Tax for Non profit organization employees: @ " + taxPer + "% : " +taxcal);
      item.setTax(item.getTax()+taxcal);
 end   

//tested
rule "SSN and Medicare"
salience 17
 when
 	item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC))
 then
	double income=item.getIncome();
	int taxPer = 3;
    double taxCal = Utils.calculateTax(income,taxPer);
    System.out.println("SSN and Medicare Tax for Non profit organization employees @ " + taxPer + "% : " +taxCal);
    item.setTax(item.getTax()+taxCal);
end

rule "Martial Status-Single"
salience 12 
    when
        item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC),MaritalStatus == Employee.MaritalStatus.SINGLE)
    then
        double Tax = item.getTax();
        int taxPer = 2;
        double Remtax = Utils.calculateTax(Tax,taxPer);
        System.out.println("Martial Status Tax-Single for Non profit organization employees @ " + taxPer + "% : " +Remtax);
        item.setTax(Tax + Remtax);
end

//tested
rule "Resident rule"
salience 16
	when 
		 item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC), residencyStatus != Employee.ResidencyStatus.FULL_TIME)
	then
		double salary = item.getIncome();
		double Tax= item.getTax();
		int taxPer = 5;
		double Remtax = Utils.calculateTax(Tax , taxPer);
		System.out.println("Non-Permanent Resident Tax for NP employees @ " + taxPer + "% : " +Remtax);
		item.setTax(Tax + Remtax);	
end	
//tested
rule "Alien stat"
salience 17
	when 
		 item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC), nationality != Employee.Nationality.USA)
	then
		double salary = item.getIncome();
		double Tax= item.getTax();
		int taxPer = 5;
		double Remtax = Utils.calculateTax(Tax , taxPer);
		System.out.println("Alien Tax for NonProfit Employees @ " + taxPer + "% : " +Remtax);
		item.setTax(Tax + Remtax);	
end	

rule "WIDOW ALLOWANCE MALE"
salience 16
	when 
		 item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) 
		 || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC), 
		 maritalStatus==Employee.MaritalStatus.WIDOW,gender == Employee.Gender.MALE)
	then
        double Tax = item.getTax();
        int taxPer = 5;
        double Remtax = Utils.calculateTax(Tax,taxPer);
        System.out.println("Martial Status Tax allowance for Male Widow profit employees @ " + taxPer + "% : -" +Remtax);
        item.setTax(Tax - Remtax);
end
// tested
rule "WIDOW ALLOWANCE FEMALE"
salience 15
	when 
		 item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) 
		 || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC), 
		 maritalStatus==Employee.MaritalStatus.WIDOW,gender == Employee.Gender.FEMALE)
	then
        double Tax = item.getTax();
        int taxPer = 8;
        double Remtax = Utils.calculateTax(Tax,taxPer);
        System.out.println("Martial Status Tax allowance for Female Widow profit employees @ " + taxPer + "% : -" +Remtax);
        item.setTax(Tax - Remtax);
end


//tested
rule "Women Welfare"
salience 9
	when 
		 item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC), gender == Employee.Gender.FEMALE)
	then
		double Tax= item.getTax();
		int taxPer = 6;
		double Remtax = Utils.calculateTax(Tax , taxPer);
		System.out.println("Women Welfare Deduction for NP employees @ " + taxPer + "% : -" +Remtax);
		item.setTax(Tax - Remtax);	
end	


//tested
rule "Dependents Exemption"
salience 8
	when  
		item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC)
		&&
		(noOfDependants > 3) ,income < 600000)
	then	
		double Tax = item.getTax();
        int taxPer = 12;
        double Remtax = Utils.calculateTax(Tax,taxPer);
        System.out.println("Dependents Allowance for NP employees  @ " + taxPer + "% : -" +Remtax);
        item.setTax(Tax - Remtax);
end

rule "ExMilatary Exemption"
salience 9
when
item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC))
then
double exmpPer=0;
double taxCal=0;
if(item.getExMilatary() == "Y")
{
exmpPer= 20;
taxCal= Utils.calculateTax(item.getTax(),exmpPer);
System.out.println("Ex- Milatary Exemption : @ "+exmpPer+ " % -"+taxCal);
item.setTax(item.getTax()-taxCal);
}
end

//tested
rule "Employees with Stocks"
salience 7
 when
         item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE)
          || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC)&&
          item.hasStocks())
    then
        int per = 0;
        double tax = item.getTax();
        List<Stock> s=item.getStocks();
        double samt=0;
        double camt=0;
        int quantity=0;
        String pdate,symbol;
        for(Stock stock:s)
        {
        pdate=DBHandler.dateFormat.format(stock.getPurchaseDate()).toString();
        symbol=stock.getSymbol();
        quantity=stock.getQuantity();
        camt+=StockProvider.GetCurrentRate(symbol)*quantity;
        samt+=HistoryProvider.GetHistoricRate(symbol,pdate)*quantity;
        }
        if((samt-camt)>0)
        {
        per = 11;
        }
        else
        {
        per=13;
        }
        samt = Utils.calculateTax(samt,per);
        System.out.println("Stock investment Exemption for NP employees @  % " +per+ ": -"  +samt);
        if(tax-samt>0)
        {
        item.setTax(tax-samt);
        }
        else
        {
        item.setTax(0);
        }
end

//tested
rule "Having worked in the same org for 15 years"
salience 6
when item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC))
then
Calendar cal = Calendar.getInstance();
int cyear=cal.get(Calendar.YEAR);
cal.setTime(item.getJobStartDate());
int syear=cal.get(Calendar.YEAR);
double exmpPer=0;
double taxCal=0;
if((cyear-syear)>=15){
exmpPer = 9;
taxCal=Utils.calculateTax(item.getTax(),exmpPer);
System.out.println("Working more than 15 years exemption: @ "+exmpPer+" :%"+taxCal);
}
end
//tested
rule "History 3 years Rule"
salience 5
	when 
		 item:Employee(organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PRIVATE) || organization.typeId == Organization.Type.getId(Organization.Type.NON_PROFIT_PUBLIC), mUtin : utin)
	then
		Date now = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(now);
		int lastYear = cal.get(Calendar.YEAR) - 1;
		boolean latePayment = false;
		for (int year = lastYear; year > lastYear - 3; year--) {
			TaxHistory tHistory = HistoryProvider.getTaxHistory(mUtin, year);
			if (tHistory != null){
				latePayment = tHistory.getTaxDueDate().before(tHistory.getTaxPaidDate());
				if(latePayment) 
					break;
			}
		}
		if(!latePayment){
			double Tax= item.getTax();
			int taxPer = 2;
			double Remtax = Utils.calculateTax(Tax , taxPer);
			System.out.println("On-time Payment Deduction @ " + taxPer + "% : -" +Remtax + " (calculating from history in MongoDB)");
			item.setTax(Tax - Remtax);
		}
end	

