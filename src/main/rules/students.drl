package com.taxhouse

import com.taxhouse.*;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.taxhouse.app.*;
import com.taxhouse.db.*;
import com.taxhouse.model.*;
import com.taxhouse.model.TaxRecord.Entry;

rule "Base Federal Tax for GA's" #Base Tax
salience 15
when
	item:Student(designation == "GA")
	taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 12;
    double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Base Federal tax (Graduate Assistants)", percent,fraction));
end


rule "Base State Tax for GA's"  #Base Tax
salience 14
when
    item:Student(designation == "GA")
    taxRecord:TaxRecord()
then
	    double amount = item.getTaxableIncome();
		double percent = 0;

		if (item.getState().substring(0, 1) == "A"
				|| item.getState().substring(0, 1) == "B") {
			percent = 8;
		} else if (item.getState().substring(0, 1) == "C"
				|| item.getState().substring(0, 1) == "D") {
			percent = 9;
		} else {
			percent = 7;
		}

		double fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Base State tax (Graduate Assistants) ", percent,fraction));
       
end


rule "For TA's Federal Tax"   #Base Tax
salience 13
when
    item:Student(designation == "TA")
    taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 6;
    double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Base Federal tax (Teaching Assistants)", percent,fraction));
end

//tested
rule "For TA's State Tax"	#Base Tax
salience 12
when
    item:Student(designation == "TA")
    taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 0;

		if (item.getState().substring(0, 1) == "A"
				|| item.getState().substring(0, 1) == "B") {
			percent = 4;
		} else if (item.getState().substring(0, 1) == "C"
				|| item.getState().substring(0, 1) == "D") {
			percent = 5;
		} else {
			percent = 6;
		}

		double fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Base State tax (Teaching Assistants) ", percent,fraction));
end



rule "For RA's Federal Tax" #Base Tax
salience 15
when
    item:Student(designation == "RA")
    taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 8;
    double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Base Federal tax (Research Assistants)", percent,fraction));
end


rule "For RA's State Tax"
salience 14
when
    item:Student(designation == "RA")
    taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 0;

		if (item.getState().substring(0, 1) == "A"
				|| item.getState().substring(0, 1) == "B") {
			percent = 7;
		} else if (item.getState().substring(0, 1) == "C"
				|| item.getState().substring(0, 1) == "D") {
			percent = 5;
		} else {
			percent = 4;
		}

		double fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Base State tax (Research Assistants) ", percent,fraction));
end



rule "For On-Campus working Federal tax" #Base Tax
salience 15
when
    item:Student(designation == "OnCampus")
    taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 8;
    double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Base Federal tax (On-Campus work)", percent,fraction));
end


rule "For On-Campus working state tax" #Base Tax
salience 14
when
    item:Student(designation == "OnCampus")
    taxRecord:TaxRecord()
then
	double amount = item.getTaxableIncome();
	double percent = 0;

		if (item.getState().substring(0, 1) == "A"
				|| item.getState().substring(0, 1) == "B") {
			percent = 7;
		} else if (item.getState().substring(0, 1) == "C"
				|| item.getState().substring(0, 1) == "D") {
			percent = 5;
		} else {
			percent = 4;
		}

		double fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Base State tax (On-campus work) ", percent,fraction));
end


rule "For Feewaiver" #Increment on Tax
salience 13
when item:Student(feeWaiverAmt!=0)
taxRecord:TaxRecord()
then
double amount=item.getFeeWaiverAmt();
double percent=5;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Tax on Feewaiver ", percent,fraction));
end


rule "Private universities" #Increment on Tax
salience 12
when
 item:Student(organization.getTypeId() == Organization.Type.getId(Organization.Type.PROFIT_PRIVATE))
taxRecord:TaxRecord()
then
double amount=taxRecord.getTotalTax();
double percent=5;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Private University Tax ", percent,fraction));
end

rule"Alien stat" #Increment on Tax
salience 11
when 
item:Student((designation == "GA" || designation == "TA" || designation == "RA"), nationality != Student.Nationality.USA)
taxRecord:TaxRecord()
then
double amount=taxRecord.getTotalTax();
double percent=7;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Private University Tax ", percent,fraction));
end	

//tested

rule"Resident rule"  #Rebate on Tax
salience 10
when 
item:Student((designation == "GA" || designation == "TA" || designation == "RA"), residencyStatus != Student.ResidencyStatus.FULL_TIME)
taxRecord:TaxRecord()
then
double amount=taxRecord.getTotalTax();
double percent=2;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for Residency Status ", percent, -fraction));
end	

rule "Having Dependants" #Rebate on Tax
salience 9 
when 
item:Student(noOfDependants>0)
taxRecord:TaxRecord()
then
double amount=taxRecord.getTotalTax();
double percent=4;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for having Dependants ", percent, -fraction));
end


rule "for Student_investment in student organizations"   #Rebate on investment
salience 8
when item:Student((designation == "GA" || designation == "TA" || designation == "RA"))
investment:Investment(id==1) from item.getInvestments() 
taxRecord:TaxRecord()
then
double amount=investment.getAmount();
double percent=8;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for investing in Student Organiazations ", percent, -fraction));
end	

rule "for Student_investment in Charity" #Rebate on investment
salience 7
when item:Student((designation == "GA" || designation == "TA" || designation == "RA"))
investment:Investment(id==2) from item.getInvestments() 
taxRecord:TaxRecord()
then
double amount=investment.getAmount();
double percent=4;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for investing in Charity ", percent, -fraction));
end


rule "For Student Exemption Minority"  #Rebate on Exemption
salience 6
when item:Student((designation == "GA" || designation == "TA" || designation == "RA"))
exemption:Exemption(id==2) from item.getExemptions() 
taxRecord:TaxRecord()
then
double amount=exemption.getAmount();
if(amount == 0) amount = 200;
double percent=9;
if(percent == 0) percent = 10;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for Student Minority Exemption ", percent, -fraction));
end

rule "For Student Exemption physical disability"
salience 5
when item:Student((designation == "GA" || designation == "TA" || designation == "RA"))
exemption:Exemption(id==4) from item.getExemptions() 
taxRecord:TaxRecord()
then
double amount=exemption.getAmount();
if(amount == 0) amount = 900;
double percent=9;
if(percent == 0) percent = 13;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for Student physical disability exemption ", percent, -fraction));
end


rule "History 3 years Rule Students" #Rebate on Tax
salience 4
when 
	item:Student(hasLatePayments(3) == true)
    taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 20;
	
	double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate(On Time payment for last 3 years)", percent, -fraction));		
end

	
rule "For Married Senior Citizens"  #Rebate on Combined Tax
salience 3
when
	item: Student(item.getMaritalStatus().toString() == "MARRIED" && item.getSpouseEvaluated() == false, sUtin : spouseUtin)
	taxRecord:TaxRecord()
then
	if (sUtin != 0) {
		Employee spouse = (Employee) DBHandler.getInstance().getTaxPayer(sUtin);
		spouse.setSpouseEvaluated(true); // not to evaluate the combined tax rule again

		try {
			TaxRecord spouseRecord = TaxRulesLogic.triggerRules(spouse);

			if (spouseRecord != null && spouseRecord.getTotalTax() != 0) {

				taxRecord.addEntry(new Entry("Spouse's Tax", spouseRecord.getTotalTax()));

				double percent;
				if (spouse instanceof ArmedForcePersonnel) {
					percent = 25;
				} else if (spouse instanceof SeniorCitizen) {
					percent = 15;
				} else {
					percent = 10;
				}

				double combinedTax = taxRecord.getTotalTax() + spouseRecord.getTotalTax();
				double reduction = Utils.calculatePercentage(combinedTax, percent);

				taxRecord.addEntry(new Entry("Tax Rebate (on Combined Tax)", percent, -reduction));

			}

		} catch (Exception e) {

		}
	}
end