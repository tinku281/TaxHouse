//created on: Nov 9, 2012
package com.taxhouse

import com.taxhouse.*;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.taxhouse.app.*;
import com.taxhouse.db.*;
import com.taxhouse.model.*;
import com.taxhouse.model.TaxRecord.Entry;



rule "Base Federal tax rule" #Base Tax
salience 15 
    when
    item:SeniorCitizen(item.getTaxableIncome()>9350)
    taxRecord:TaxRecord()
then
  	double amount = item.getTaxableIncome();
	double percent = 0;

	Date enddate = item.getDateOfBirth();
	Date now = new Date();

	Calendar cal = Calendar.getInstance();
	cal.setTime(enddate);

	Calendar cal1 = Calendar.getInstance();
	cal1.setTime(now);
	cal.add(Calendar.YEAR, -70); // subtract 70 years from current date

	if (cal.after(cal1)) {

		percent = 3.5;
	} else {
		percent = 4.5;
	}

	double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Base Federal tax (senior citizens)", percent,
			fraction));
end



rule "Base State tax rule"  #Base Tax
salience 14
    when
        item:SeniorCitizen(item.getTaxableIncome()>8000)
        
    taxRecord:TaxRecord()
	then
      	double amount = item.getTaxableIncome();
		double percent = 0;

		Date enddate = item.getDateOfBirth();
		Date now = new Date();

		Calendar cal = Calendar.getInstance();
		cal.setTime(enddate);

		Calendar cal1 = Calendar.getInstance();
		cal1.setTime(now);
		cal.add(Calendar.YEAR, -70); // subtract 70 years from current date

		if (item.getState().substring(0, 1) == "A"
				|| item.getState().substring(0, 1) == "B") {
			if (cal.after(cal1)) {
				percent = 3.5;
			}

			else {
				percent = 4.5;
			}
		} else if (item.getState().substring(0, 1) == "C"
				|| item.getState().substring(0, 1) == "D") {
			if (cal.after(cal1)) {
				percent = 3.5;
			} else {
				percent = 4.2;
			}
		} else {
			if (cal.after(cal1)) {
				percent = 3.5;
			} else {
				percent = 4.9;
			}
		}

		double fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Base State tax (senior citizens) @  %",percent,fraction));
      end

      
rule "Alien status for SeniorCitizens" #Increment on Tax
salience 13
when 
item:SeniorCitizen(nationality != Employee.Nationality.USA)
taxRecord:TaxRecord()
then
		double amount = taxRecord.getTotalTax();
	int percent = 5;
	
	double increment = Utils.calculatePercentage(amount , percent);
	taxRecord.addEntry(new Entry("Alien Status Tax(Non Citizen)", percent, increment));	
end	


rule "ExMilatary Rebate for Senior Citizens" # Rebate on Tax
salience 14
when
item:SeniorCitizen(exMilatary == 'Y')
taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	int taxPer = 10;
	
	double reduction = Utils.calculatePercentage(amount, taxPer);
	taxRecord.addEntry(new Entry("Tax Rebate(Ex-Military Personnel)", taxPer,-reduction));	
end
 
 
rule "Residency Status for Senior Citizens" #Rebate on Tax
salience 13 
when item:SeniorCitizen(residencyStatus != Employee.ResidencyStatus.FULL_TIME)
taxRecord:TaxRecord()
then
double extra,taxCal;
double per;

double amount= taxRecord.getTotalTax();
	int taxPer = 5;
	
	double reduction = Utils.calculatePercentage(amount , taxPer);
	taxRecord.addEntry(new Entry("Residential Status Tax Rebate (Non-Resident)", taxPer, -reduction));
end


rule "Income Source is PF" #Rebate on Tax
salience 12
when
item:SeniorCitizen()
income:SeniorCitizen.Income(source== "PF") from item.getIncomes()
taxRecord:TaxRecord()
then
double amount = taxRecord.getTotalTax();
double percent = 10;

double reduction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Income from PF Rebate (senior citizens) @  %",percent,-reduction));
end


rule "Income Source is annuity" # Rebate on Tax
salience 11
when
    item:SeniorCitizen()
    income:SeniorCitizen.Income(source== "annuity") from item.getIncomes()
taxRecord:TaxRecord()
then
double amount = taxRecord.getTotalTax();
double percent = 12;

double reduction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Income from annuity (senior citizens) @  %",percent,-reduction));
end
 
 
rule "Income Source is from otherstate" #Rebate on Tax
salience 10
when
item:SeniorCitizen()
income:SeniorCitizen.Income(source== "otherstate") from item.getIncomes()
taxRecord:TaxRecord()
then
double amount = taxRecord.getTotalTax();
double percent = 15;

double reduction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Income from OtherState (senior citizens) @  %",percent,-reduction));
end
 
 
rule "Based on Number of dependants" #Rebate on Tax
salience 9
when item:SeniorCitizen(noOfDependants > 3)
taxRecord:TaxRecord()
then
double amount  = taxRecord.getTotalTax();
double percent = item.getNoOfDependants()/2;
	
double reduction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for more than three dependants(senior citizens) @  %",percent,-reduction));
end


rule "Widow" #Rebate on Tax
salience 8
when item:SeniorCitizen(maritalStatus.toString() == "WIDOW")
taxRecord:TaxRecord()
then

double amount  = taxRecord.getTotalTax();
double percent = 4.7;
	
double reduction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Rebate for Widows(senior citizens) @  %",percent,-reduction));
end

rule "Senior Citizens invested in Health Insurance"	#Rebate on Investment
salience 7
when 
	item:SeniorCitizen()
	investment:Investment(id==22) from item.getInvestments() 
	taxRecord:TaxRecord()
then
double amount = investment.getAmount();
double percent = 4;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Tax Rebate(Health Insurance Investment) on" + amount, percent, -fraction));
end

rule "For Senior Citizens with physical disability" # Exemption on Tax
salience 6
when
item:SeniorCitizen()
exemption:Exemption(id==4) from item.getExemptions() 
taxRecord:TaxRecord()
then
double amount = exemption.getAmount();
if(amount == 0) amount = 1000;
double percent = exemption.getPercentage();
if(percent == 0) percent = 7;
double fraction = Utils.calculatePercentage(amount, percent);
taxRecord.addEntry(new Entry("Tax Exemption Rebate(Physical Disability) on" + amount, percent, -fraction));
end


rule "History 3 years Rule Senior Citizens" #Rebate on Tax
salience 5
when 
	item:SeniorCitizen(hasLatePayments(3) == true)
    taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 15;
	
	double fraction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate(On Time payment for last 3 years)", percent, -fraction));		
end


rule "Senior Citizens with Stocks" # Increment/Rebate on Tax
salience 4
when 
	item:SeniorCitizen(hasStocks() == true)
    taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent, fraction;
	
	if (item.isProfitedByStocks()) {
		percent = 11;
		fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Tax Increment (for Stock Profit)", percent, fraction));
		
	} else {
		percent = 7;
		fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Tax Rebate (for Stock Loss)", percent, -fraction));
	}	
end
	
	
rule "For Married Senior Citizens"  #Rebate on Combined Tax
salience 3
when
	item: SeniorCitizen(item.getMaritalStatus().toString() == "MARRIED" && item.getSpouseEvaluated() == false, sUtin : spouseUtin)
	taxRecord:TaxRecord()
then
	if (sUtin != 0) {
		Employee spouse = (Employee) DBHandler.getInstance().getTaxPayer(sUtin);
		spouse.setSpouseEvaluated(true); // not to evaluate the combined tax rule again

		try {
			TaxRecord spouseRecord = TaxRulesLogic.triggerRules(spouse);

			if (spouseRecord != null && spouseRecord.getTotalTax() != 0) {

				taxRecord.addEntry(new Entry("Spouse's Tax", spouseRecord.getTotalTax()));

				double percent;
				if (spouse instanceof ArmedForcePersonnel) {
					percent = 25;
				} else if (spouse instanceof SeniorCitizen) {
					percent = 15;
				} else {
					percent = 20;
				}

				double combinedTax = taxRecord.getTotalTax() + spouseRecord.getTotalTax();
				double reduction = Utils.calculatePercentage(combinedTax, percent);

				taxRecord.addEntry(new Entry("Tax Rebate (on Combined Tax)", percent, -reduction));

			}

		} catch (Exception e) {

		}
	}
end

 