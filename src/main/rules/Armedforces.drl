package com.taxhouse
import java.util.Date;
import java.util.Calendar;
import java.util.List;

import com.taxhouse.app.*;
import com.taxhouse.db.*;
import com.taxhouse.model.*;
import com.taxhouse.model.TaxRecord.Entry;

 
//tested
rule "Base Tax A1 Combat Zone last 10 years"
salience 18
when 
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A1") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
     
 	Date enddate = specialtask.getEndDate();
	Date now = new Date();
	
	Calendar cal = Calendar.getInstance();
	cal.setTime(enddate);
	
	Calendar cal1 = Calendar.getInstance();
	cal1.setTime(now);
	cal1.add(Calendar.YEAR, -10); //subtract 10 years from current date
	
	if (cal.after(cal1)) {
		taxRecord.addEntry(new Entry("Tax after Full Rebate(Active A1 Combat Zone Personnel)", 0));
	
		drools.halt();
	}
 end
 
 //tested
rule "Base Tax A2 Combat Zone last 10 years"
salience 17
when 
	item:ArmedForcePersonnel()
 	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A2") from item.getSpecialTasks()
 	taxRecord:TaxRecord()
then
   	Date enddate = specialtask.getEndDate();
	Date now = new Date();
	
	Calendar cal = Calendar.getInstance();
	cal.setTime(enddate);
	
	Calendar cal1 = Calendar.getInstance();
	cal1.setTime(now);
	cal1.add(Calendar.YEAR, -10); // subtract 10 years from current date
	
	if (cal.after(cal1)) {
		double taxPer = 1;
		double calTax = Utils.calculatePercentage(item.getTaxableIncome(), taxPer);
		
		taxRecord.addEntry(new Entry("Tax for Active A2 Combat Zone Personnel", taxPer, calTax));
		drools.halt();
	}  	
 end
 
 //tested
rule "Base Tax A3 Combat Zone last 10 years"
salience 16
when 
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A3") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
	Date enddate = specialtask.getEndDate();
	Date now = new Date();
	
	Calendar cal = Calendar.getInstance();
	cal.setTime(enddate);
	
	Calendar cal1 = Calendar.getInstance();
	cal1.setTime(now);
	cal1.add(Calendar.YEAR, -10); // subtract 10 years from current date
	
	if (cal.after(cal1)) {
		double taxPer = 2;
		double calTax = Utils.calculatePercentage(item.getTaxableIncome(), taxPer);
		
		taxRecord.addEntry(new Entry("Tax for Active A3 Combat Zone Personnel", taxPer, calTax));
		drools.halt();
	}  	
 end
 
 //tested
rule "Base Tax A4 Combat Zone last 10 years"
salience 15
when 
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A4") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
	Date enddate = specialtask.getEndDate();
	Date now = new Date();
	
	Calendar cal = Calendar.getInstance();
	cal.setTime(enddate);
	
	Calendar cal1 = Calendar.getInstance();
	cal1.setTime(now);
	cal1.add(Calendar.YEAR, -10); // subtract 10 years from current date
	
	if (cal.after(cal1)) {
		double taxPer = 5;
		double calTax = Utils.calculatePercentage(item.getTaxableIncome(), taxPer);
		
		taxRecord.addEntry(new Entry("Tax for Active A4 Combat Zone Personnel", taxPer, calTax));
		drools.halt();
	}  	
 end
 
//tested
rule "Base Federal rule for Armed forces with designation 3"
salience 14
when
	item:ArmedForcePersonnel(designation=="Seaman"||designation == "Private" || designation =="Aircraftman" )
	taxRecord:TaxRecord()
then
	double Per = 7;
	double taxCal = 0;
	
	taxCal = Utils.calculatePercentage(item.getTaxableIncome(), Per);
	taxRecord.addEntry(new Entry("Base Federal Tax (Rank3 Armed force Personnel)", Per, taxCal));
end

//tested
rule "Base State rule for Armed forces with designation 3"
salience 13
when
	item:ArmedForcePersonnel(designation=="Seaman"||designation == "Private" || designation =="Aircraftman" )
	taxRecord:TaxRecord()
then
	double taxCal = 0;
	double taxPer = 0;
	
	if (item.getState().substring(0, 1) == "A" || item.getState().substring(0, 1) == "B") {
		taxPer = 7.4;
	} else if (item.getState().substring(0, 1) == "C" || item.getState().substring(0, 1) == "D") {
		taxPer = 7.6;
	} else {
		taxPer = 7.9;
	}
	
	taxCal = Utils.calculatePercentage(item.getTaxableIncome(), taxPer);
	taxRecord.addEntry(new Entry("Base State Tax (Rank3 Armed force Personnel)", taxPer, taxCal));
end

//tested
rule "Base Federal rule for Armed forces with designation 2"
salience 14
when
	item:ArmedForcePersonnel(designation=="Lieutenant"||designation == "Captain" || designation =="Major" )
	taxRecord:TaxRecord()
then
	double Per = 7.8;
	double taxCal = 0;
	
	taxCal = Utils.calculatePercentage(item.getTaxableIncome(), Per);
	taxRecord.addEntry(new Entry("Base Federal Tax (Rank2 Armed force Personnel)", Per, taxCal));
end

//tested
rule "Base State rule for Armed forces with designation 2"
salience 13
when
	item:ArmedForcePersonnel(designation=="Lieutenant"||designation == "Captain" || designation =="Major" )
	taxRecord:TaxRecord()
then
	double taxPer = 0;
	double taxCal = 0;
	
	if (item.getState().substring(0, 1) == "A" || item.getState().substring(0, 1) == "B") {
		taxPer = 5.4;
	} else if (item.getState().substring(0, 1) == "C" || item.getState().substring(0, 1) == "D") {
		taxPer = 5.5;
	} else {
		taxPer = 6;
	}
	
	taxCal = Utils.calculatePercentage(item.getTaxableIncome(), taxPer);
	taxRecord.addEntry(new Entry("Base State Tax (Rank2 Armed force Personnel)", taxPer, taxCal));
end

//tested
rule "Base Federal rule for Armed forces with designation 1 "
salience 14
when
	item:ArmedForcePersonnel(designation=="Army General"|| designation =="Colonel" )
	taxRecord:TaxRecord()
then
	double Per = 8.8;
	double taxCal = 0;
	
	taxCal = Utils.calculatePercentage(item.getTaxableIncome(), Per);
	taxRecord.addEntry(new Entry("Base Federal Tax (Rank1 Armed force Personnel)", Per, taxCal));
end

//tested
rule "Base State rule for Armed forces with designation 1"
salience 13
when
	item:ArmedForcePersonnel(designation=="Army General"|| designation =="Colonel" )
	taxRecord:TaxRecord()
then
	double taxPer = 0;
	double taxCal = 0;
	
	if (item.getState().substring(0, 1) == "A" || item.getState().substring(0, 1) == "B") {
		taxPer = 7.2;
	} else if (item.getState().substring(0, 1) == "C" || item.getState().substring(0, 1) == "D") {
		taxPer = 6.6;
	} else {
		taxPer = 4.6;
	}
	taxCal = Utils.calculatePercentage(item.getTaxableIncome(), taxPer);
	
	taxRecord.addEntry(new Entry("Base State Tax (Rank1 Armed force Personnel)", taxPer, taxCal));
end

//tested
rule "Worked at combat A1 Zone" #Rebate on Tax
salience 12
when
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A1") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 80;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (A1 Combat Zone) on $" + Utils.formatDouble(amount),
			percent, -reduction));
end

//tested
rule "Worked at combat A2 Zone" #Rebate on Tax
salience 11
when
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A2") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 60;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (A2 Combat Zone) on $" + Utils.formatDouble(amount),
			percent, -reduction));
end

//tested
rule "Worked at combat A3 Zone" #Rebate on Tax
salience 10
when
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A3") from item.getSpecialTasks()
    taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 40;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (A3 Combat Zone) on $" + Utils.formatDouble(amount),
			percent, -reduction));
end

//tested
rule "Worked at combat A4 Zone" #Rebate on Tax
salience 9
when
    item:ArmedForcePersonnel()
    specialtask:ArmedForcePersonnel.SpecialTask(combatZone=="A4") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
    double amount = taxRecord.getTotalTax();
	double percent = 30;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (A4 Combat Zone) on $" + Utils.formatDouble(amount),
			percent, -reduction));	
end

//tested		
rule "Special task in Redcross" #Rebate on Tax
salience 8
when 
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(name == "Red Cross") from item.getSpecialTasks()
 	taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 4;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (Redcross) on $" + Utils.formatDouble(amount),
			percent, -reduction));
end 

//tested
rule "Special task in Marine" #Rebate on Tax
salience 7
when 
	item:ArmedForcePersonnel()
	specialtask:ArmedForcePersonnel.SpecialTask(name == "US Marine") from item.getSpecialTasks()
	taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent = 6;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (Marine) on $" + Utils.formatDouble(amount),
			percent, -reduction));
end 

 //tested
rule "Hospitalization Exemption" #Rebate on Exemption
salience 10
when 
	item:ArmedForcePersonnel()
	exemption:Exemption(id==14) from item.getExemptions() 
	taxRecord:TaxRecord()
then
	double amount = exemption.getAmount();
	if(amount == 0) amount = 1000;
	double percent = 10;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (for Hospitalization "+ exemption.getName() +") on $" + Utils.formatDouble(amount),
			percent, -reduction));
end

rule "Housing investment Exception" #Rebate on Exemption
salience 10
when 
	item:ArmedForcePersonnel()
	exemption:Exemption(id==2) from item.getExemptions() 
	taxRecord:TaxRecord()
then
	double amount = exemption.getAmount();
	if(amount == 0) amount = 1000;
	double percent = 20;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (for Housing "+ exemption.getName() +") on $" + Utils.formatDouble(amount),
			percent, -reduction));
end

//tested
rule "With Dependants" #Rebate on Dependant Income
salience 4
when 
	item:ArmedForcePersonnel(noOfDependants > 0)
	taxRecord:TaxRecord()
then
	double amount = item.getDependantIncome();
	double percent = 20;
	
	double reduction = Utils.calculatePercentage(amount, percent);
	taxRecord.addEntry(new Entry("Tax Rebate (for Dependants) on $" + Utils.formatDouble(amount),
			percent, -reduction));
end

//tested
rule "Armed personnel with Stocks" # Increment/Rebate on Tax for Stocks
salience 3
when
	item:ArmedForcePersonnel(item.hasStocks())
    taxRecord:TaxRecord()
then
	double amount = taxRecord.getTotalTax();
	double percent, fraction;
	
	if (item.isProfitedByStocks()) {
		percent = 5;
		fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Tax Increment (for Stock Profit)", percent, fraction));
		
	} else {
		percent = 10;
		fraction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Tax Rebate (for Stock Loss)", percent, -fraction));
	}	
end

//tested
rule "History 3 years Rule for Armed Forces" #Rebate for On-time payment for prev 3 years
salience 2
when 
	item:ArmedForcePersonnel()
	taxRecord:TaxRecord()
then
	if (!item.hasLatePayments(3)) {
		double amount = taxRecord.getTotalTax();
		int percent = 40;

		double reduction = Utils.calculatePercentage(amount, percent);
		taxRecord.addEntry(new Entry("Tax Exemption Rebate(On-time Payment for past 3 years)", percent, -reduction));
	}
end


rule "Married Armed Force People" #Combined Tax with Spouse
salience 1
when 
	item:ArmedForcePersonnel(item.getMaritalStatus().toString() == "MARRIED" && item.getSpouseEvaluated() == false, sUtin : spouseUtin)
	taxRecord:TaxRecord()
then
	if (sUtin != 0) {
		Employee spouse = (Employee) DBHandler.getInstance().getTaxPayer(sUtin);
		spouse.setSpouseEvaluated(true); // not to evaluate the combined tax rule again

		try {
			TaxRecord spouseRecord = TaxRulesLogic.triggerRules(spouse);

			if (spouseRecord != null && spouseRecord.getTotalTax() != 0) {

				taxRecord.addEntry(new Entry("Spouse's Tax", spouseRecord.getTotalTax()));

				double percent;
				if (spouse instanceof ArmedForcePersonnel) {
					percent = 30;
				} else if (spouse instanceof SeniorCitizen) {
					percent = 20;
				} else {
					percent = 10;
				}

				double combinedTax = taxRecord.getTotalTax() + spouseRecord.getTotalTax();
				double reduction = Utils.calculatePercentage(combinedTax, percent);

				taxRecord.addEntry(new Entry("Tax Rebate (on Combined Tax)", percent, -reduction));

			}

		} catch (Exception e) {

		}
	}
end 